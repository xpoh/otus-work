/*
 * OTUS Highload Architect
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.2.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"fmt"

	"github.com/redis/go-redis/v9"
	"github.com/xpoh/otus-work-dialogs/pkg/grpc/dialogs/v1"
	"github.com/xpoh/otus-work/internal/clickhouse"
	"github.com/xpoh/otus-work/internal/config"
	"github.com/xpoh/otus-work/internal/database"
	"github.com/xpoh/otus-work/internal/tarantool"
	"google.golang.org/grpc"
)

type Instance struct {
	db            *database.Instance
	tcl           *tarantool.Client
	rds           *redis.Client
	click         *clickhouse.Client
	cfg           *config.Config
	dialogsClient dialogs.DialogServiceClient
}

func NewInstance(
	db *database.Instance,
	tcl *tarantool.Client,
	cfg *config.Config,
	click *clickhouse.Client,
) *Instance {
	r := redis.NewClient(&redis.Options{
		Addr: fmt.Sprintf("%s:%d", cfg.GetRedisHost(), cfg.GetRedisPort()),
	})

	conn, err := grpc.NewClient(cfg.GetDialogsURI())
	if err != nil {
		panic(err)
	}

	return &Instance{
		db:            db,
		rds:           r,
		tcl:           tcl,
		cfg:           cfg,
		click:         click,
		dialogsClient: dialogs.NewDialogServiceClient(conn),
	}
}
